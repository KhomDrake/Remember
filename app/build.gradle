apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        testApplicationId "com.remember.remember.test"
        applicationId "com.remember.remember"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode 26
        versionName "4.4.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        upload {
            storeFile file("$rootDir/distribution/key_store")
            storePassword 'asdsadsadasdasdsa'
            keyAlias 'dasdsadasdasdasdasdsa'
            keyPassword 'dasdsadasdasdasdasdasd'
        }
    }

    buildTypes {
        release {
            resValue 'string', 'app_name', "Remember"
            signingConfig signingConfigs.upload
            shrinkResources false
            minifyEnabled false
            buildConfigField("boolean", "SHOW_LEAVE_MEMORY_LINE", "false")
        }

        debug {
            applicationIdSuffix '.debug'
            resValue 'string', 'app_name', "Remember Debug"
            debuggable true
            shrinkResources false
            minifyEnabled false
            buildConfigField("boolean", "SHOW_LEAVE_MEMORY_LINE", "false")
        }
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = 1.8
    }
}

dependencies {
    implementation project(':common')
    implementation project(':extension')

    implementation project(':moment')
    implementation project(':type')
    implementation project(':memoryline')
    implementation project(':onboarding')
    implementation project(':profile')
    implementation project(':gallery')

    implementation libs.expandable_layout
    implementation libs.expandable_fab
    implementation libs.appcompat
    implementation libs.kotlin_stdlib
    implementation libs.androidx.constraint_layout
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.messaging

    debugImplementation(libs.test.fragment) {
        exclude group: 'androidx.test', module: 'core'
    }

    testImplementation project(':test')
    androidTestImplementation project(':test')
}

task findDeeplinks(type: Delete) {
    dependsOn("assembleDebug")
    doFirst {
        mkdir("build/deeplinks")
    }

    doLast {
        File androidManifest = layout.buildDirectory.asFileTree.filter {
            it.name == "AndroidManifest.xml"
        }[0]
        String fileContents = new File(androidManifest.absolutePath).getText('UTF-8')
        String[] schemes = ["android:scheme=\"https\"", "android:scheme=\"sdsd\""]
        String loggedIn = ""
        String loggedOut = ""
        if(fileContents.contains(schemes[0])) {
            String[] data = fileContents.split("(?=<data[\\s\\S]*?/>)")
            String allData = ""
            for(line in data) {
                if(line.contains(schemes[0])) {
                    String[] deeplink = line.split("/>")[0].replaceAll("(<data|=|\"|/>)", "").split("(android:host|android:path|android:scheme)")
                    String url = ""
                    if(deeplink.length == 4) {
                        url = deeplink[1].trim() + deeplink[2].trim()
                    } else {
                        url = deeplink[1].trim()
                    }
                    allData = allData + "<li>$url</li>"
                }
            }
            loggedOut = allData
        }
        if(fileContents.contains(schemes[1])) {
            String[] data = fileContents.split("(?=<data[\\s\\S]*?/>)")
            String allData = ""
            for(line in data) {
                if(line.contains(schemes[1])) {
                    String[] deeplink = line.split("/>")[0].replaceAll("(<data|=|\"|/>)", "").split("(android:host|android:path|android:scheme)")
                    String url = ""
                    if(deeplink.length == 4) {
                        url = deeplink[1].trim() + deeplink[2].trim()
                    } else {
                        url = deeplink[1].trim()
                    }
                    allData = allData + "<li>/$url</li>"
                }
            }
            loggedIn = allData
        }

        String html = """
            <!DOCTYPE html>
            <html lang="en">
            <head>
            <title>CSS Template</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
            header {
              background-color: #666;
              padding: 30px;
              text-align: center;
              font-size: 35px;
              color: white;
            }
            </style>
            </head>
            <body>

            <h2>Deeplink Logados</h2>
              <ul>
                $loggedIn
              </ul>

            <h2>Deeplink Deslogados</h2>
             <ul>
                $loggedOut
             </ul>
            </body>
            </html>
        """
        println html
//        file.text = html
    }
}
